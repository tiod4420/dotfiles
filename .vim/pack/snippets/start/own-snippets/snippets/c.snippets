snippet main
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, char *argv[])
	{
		int ret = EXIT_FAILURE;
		int res;

		${0:$VISUAL}

		ret = EXIT_SUCCESS;
	cleanup:
		return ret;
	}
snippet func
	int ${1:function_name}(${2})
	{
		int ret = ${3:STATUS}_FAILURE;
		int res;

		${0:$VISUAL}

		ret = ${3}_SUCCESS;
	cleanup:
		return ret;
	}
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define ${1}

	${0:$VISUAL}

	#endif /* ${1} */
snippet struct
	struct ${1:my_struct} {
		${0}
	};

	void ${1}_init(struct ${1} *${1});
	void ${1}_free(struct ${1} *${1});
snippet cast
	((${1:const uint8_t *})${0:$VISUAL})
snippet pr
	printf("${0}\\n");
snippet fpr
	fprintf(${1:stderr}, "${0}\\n");
snippet dump
	for (size_t i = 0; i < ${1:${VISUAL:ptr}}_sz; ++i) {
		printf("%02x", ${0:$1}[i]);
	}
	printf("\\n");
snippet array
	uint8_t ${1:array}[$2];
	size_t ${1}_sz = sizeof(${1});
snippet ptr
	uint8_t *${1:ptr} = NULL;
	size_t ${1}_sz = 0;
snippet inc
	#include <${1:stdio}.h>
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
snippet ifn
	#ifndef ${1:FOO}
	#define ${1} "${0}"
	#endif /* ${1} */
snippet for
	for (size_t ${2:i} = 0; ${2} < ${1:count}; ${3:++}${2}) {
		${0}
	}
snippet check
	if (${1:0} != res) {
		ret = ${2:1};
		goto cleanup;
	}
snippet cpp
	#ifdef __cplusplus
	extern "C" {
	#endif /* __cplusplus */

	${0:$VISUAL}

	#ifdef __cplusplus
	}
	#endif /* __cplusplus */
snippet todo
	// TODO
snippet __attr
	__attribute__((${1:visibility("default")}))
