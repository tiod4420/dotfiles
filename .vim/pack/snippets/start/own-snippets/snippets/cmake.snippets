snippet cmake
	cmake_minimum_required(VERSION 3.10)
	project(${1:Project} C)

	option(BUILD_TESTING "Build the testing tree." OFF)

	include(CTest)

	${0:# TODO}
snippet add
	add_subdirectory(${0:tests})
snippet pr
	message(STATUS "${0:Hello, world!}")
snippet warn
	message(WARNING "${0:Hello, world!}")
snippet err
	message(FATAL_ERROR "${0:Hello, world!}")
snippet target
	set(TARGET_NAME ${1:${VISUAL:target}})

	file(GLOB SOURCES src/*.c src/*.h)
	file(GLOB HEADERS include/*.h)
snippet exe
	add_executable(\${TARGET_NAME} \${SOURCES} \${HEADERS})
snippet lib
	add_library(\${TARGET_NAME} ${1:STATIC} \${SOURCES} \${HEADERS})
snippet prop
	set_target_properties(\${TARGET_NAME} PROPERTIES ${1:C_STANDARD 11})
snippet inc
	target_include_directories(\${TARGET_NAME}
		PUBLIC ${1:include}
		PRIVATE ${2:src}
		)
snippet cflags
	target_compile_options(\${TARGET_NAME}
		PUBLIC -Wall -Wextra -W -Wwrite-strings -Winit-self -Wpointer-arith
		PUBLIC -Wreturn-type -Waddress -Wsequence-point -Wformat-security
		PUBLIC -Wmissing-include-dirs -Wfloat-equal -Wshadow -Wcast-align
		)
snippet ldflags
	target_link_libraries(\${TARGET_NAME}
		PUBLIC ${1:library}
		)
snippet asan
	target_compile_options(\${TARGET_NAME}
		PUBLIC -fsanitize=address -fsanitize=undefined
		)

	target_link_libraries(\${TARGET_NAME}
		PUBLIC -fsanitize=address -fsanitize=undefined
		)
snippet test
	add_test(NAME \${TARGET_NAME} COMMAND \${TARGET_NAME})
snippet gtest
	include(ExternalProject)

	set(TARGET_NAME googletest)

	ExternalProject_Add(\${TARGET_NAME}_dl
		GIT_REPOSITORY    https://github.com/google/googletest.git
		GIT_TAG           release-1.11.0
		GIT_CONFIG        advice.detachedHead=false
		GIT_SHALLOW       ON
		CMAKE_CACHE_ARGS  -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		BUILD_COMMAND     \${CMAKE_COMMAND} --build <BINARY_DIR> --config $<CONFIG>
		UPDATE_COMMAND    ""
		)
	ExternalProject_Get_property(\${TARGET_NAME}_dl INSTALL_DIR)
	
	add_library(\${TARGET_NAME} INTERFACE)
	
	target_include_directories(\${TARGET_NAME}
		INTERFACE \${INSTALL_DIR}/include
		)
	
	target_link_libraries(\${TARGET_NAME}
		INTERFACE -L${INSTALL_DIR}/lib
		INTERFACE gtest gmock Threads::Threads
		)
	
	add_dependencies(\${TARGET_NAME} \${TARGET_NAME}_dl)
snippet func
	function(${1:function} target)
		set(FUNCTION_NAME ${1})
		# Parse arguments
		set(options "")
		set(one_value_keywords "")
		set(multi_value_keywords "")
		cmake_parse_arguments(${2:PREFIX} "\${options}" "\${one_value_keywords}" "\${multi_value_keywords}" \${ARGN})

		# Check arguments
		if(NOT TARGET "\${target}")
			message(FATAL_ERROR "\${FUNCTION_NAME} '\${target}' is not a TARGET")
		endif()

		${0:# TODO}
	endfunction()
snippet binary
	set(TARGET_NAME ${1:target})
	set(${2:INPUT_FILE} ${3:path})
	get_filename_component(${2}_NAME ${2} NAME)
	get_filename_component(${2}_DIR ${2} DIRECTORY)
	set(${4:OUTPUT_FILE} \${${2}_NAME}.c)

	add_custom_command(
		COMMENT "Generating C include file for \${${2}_NAME}"
		OUTPUT \${${4}}
		DEPENDS \${TARGET_NAME} \${${2}}
		COMMAND xxd -i \${${2}_NAME} "\${CMAKE_CURRENT_BINARY_DIR}/\${${4}}"
		WORKING_DIRECTORY \${${2}_DIR}
		)

	add_library(${5:lib} OBJECT \${${4}})
snippet generated
	add_custom_command(
		COMMENT "${1:comment}"
		OUTPUT ${2:output}
		DEPENDS ${3:depends}
		COMMAND ${0:command}
		WORKING_DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR}
		)

	add_custom_target(build_${4:target}
		DEPENDS ${2}
		)

	add_library(${4} STATIC IMPORTED GLOBAL)
	add_dependencies(${4} build_${4})
	set_target_properties(${4} PROPERTIES IMPORTED_LOCATION ${2})

	install(
		FILES ${2}
		DESTINATION lib
		PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
		)
