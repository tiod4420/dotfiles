snippet main
	pub fn main() {
	    ${0}
	}
snippet fn
	fn ${1:function_name}(${2}) {
	    ${0}
	}
snippet fnret
	fn ${1:function_name}(${2}) -> ${3} {
	    ${0}
	}
snippet struct
	struct ${1:Struct} {
	    ${2}
	}
snippet obj
	pub struct ${1:Struct} {
	    ${2}
	}

	impl${3} ${1} {
	    pub fn new(${4}) -> Self {
	        Self { ${0} }
	    }
	}
snippet enum
	enum ${1:Enum} {
	    ${0}
	}
snippet impl
	impl ${1} {
	    ${0}
	}
snippet implfor
	impl ${1} for ${2} {
	    ${0}
	}
snippet mod
	mod ${1:mod} {
	    ${0:$VISUAL}
	}
snippet trait
	trait ${1:Trait} {
	    ${0:$VISUAL}
	}
snippet for
	for ${1:i} in ${2} {
	    ${0}
	}
snippet iflet
	if let Some(${1}) = ${2} {
	    ${0:$VISUAL}
	}
snippet todo
	// TODO: ${0:$VISUAL}
snippet pr
	println!("${1}"${2});${0}
snippet fmt
	format!("${1}"${2});${0}
snippet epr
	eprintln!("${1}"${2});${0}
snippet dump
	println!("{:#?}", ${1:$VISUAL});
snippet opt
	Option<${1}>
snippet res
	Result<${1}, ${2}>
snippet vec
	vec![${1}]
snippet box
	Box::new(${0:$VISUAL})
snippet rc
	Rc::new(${0:$VISUAL})
snippet #[
	#[${1:inline}]
snippet cfg
	#[cfg(${1:target_os = "linux"})]
snippet der
	#[derive(${1:Debug})]
snippet ut
	#[cfg(test)]
	mod tests {
	    use super::*;

	    ${0}
	}
snippet test
	#[test]
	fn ${1:test}() {
	    ${0}
	}
snippet as
	assert!(${1});
snippet ase
	assert_eq!(${1}, ${2});
snippet asn
	assert_ne!(${1}, ${2});
snippet ext
	#[macro_user]
	extern crate ${1};
