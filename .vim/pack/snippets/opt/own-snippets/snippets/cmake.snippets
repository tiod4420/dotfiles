snippet cmake
	cmake_minimum_required(VERSION 3.13)
	project(${1:Project} C)

	option(BUILD_TESTING "Build the testing tree." OFF)
	include(CTest)

	add_compile_options(
		-Wall -Wextra -W -Wwrite-strings -Winit-self -Wpointer-arith
		-Wreturn-type -Waddress -Wsequence-point -Wshadow -Wformat-security
		-Wmissing-include-dirs -Wfloat-equal -Wcast-align -Wmissing-declarations
		-Wvla
		\$<\$<CONFIG:ASan>:-fsanitize=address\$<SEMICOLON>-fsanitize=undefined>
		)

	add_link_options(
		\$<\$<CONFIG:ASan>:-fsanitize=address\$<SEMICOLON>-fsanitize=undefined>
		)

	add_subdirectory(externals)
	add_subdirectory(tests)
snippet exe
	set(TARGET_NAME ${1:${VISUAL:target}})

	file(GLOB SOURCES src/*.c src/*.h)
	file(GLOB HEADERS include/*.h)

	add_executable(\${TARGET_NAME} \${SOURCES} \${HEADERS})
	set_target_properties(\${TARGET_NAME} PROPERTIES C_STANDARD 11)

	target_compile_options(\${TARGET_NAME}
		PUBLIC ${2:option}
		)

	target_include_directories(\${TARGET_NAME}
		PUBLIC include
		PRIVATE src
		)

	target_link_options(\${TARGET_NAME}
		PUBLIC ${3:option}
		)

	target_link_libraries(\${TARGET_NAME}
		PUBLIC ${4:library}
		)
snippet lib
	set(TARGET_NAME ${1:${VISUAL:target}})

	file(GLOB SOURCES src/*.c src/*.h)
	file(GLOB HEADERS include/*.h)

	add_library(\${TARGET_NAME} ${2:STATIC} \${SOURCES} \${HEADERS})
	set_target_properties(\${TARGET_NAME} PROPERTIES C_STANDARD 11)

	target_compile_options(\${TARGET_NAME}
		PUBLIC ${3:option}
		)

	target_include_directories(\${TARGET_NAME}
		PUBLIC include
		PRIVATE src
		)

	target_link_options(\${TARGET_NAME}
		PUBLIC ${4:option}
		)

	target_link_libraries(\${TARGET_NAME}
		PUBLIC ${5:option}
		)
snippet add
	add_subdirectory(${1:${VISUAL:src}})
snippet dep
	add_dependencies(${1:target} ${2:dep})
snippet props
	set_target_properties(${1:target} PROPERTIES
		${0}
		)
snippet test
	add_test(NAME ${1:test}
		COMMAND ${2:\$<TARGET_FILE:target>}
		)
snippet command
	add_custom_command(
		COMMENT "${1:comment}"
		OUTPUT ${2:output}
		DEPENDS ${3:depends}
		COMMAND ${0:command}
		)
snippet target
	add_custom_target(${1:target} ${2:ALL} DEPENDS ${0:dependency})
snippet func
	function(${1:function} target)
		set(FUNCTION_NAME ${1})
		# Parse arguments
		set(options "")
		set(one_value_keywords "")
		set(multi_value_keywords "")
		cmake_parse_arguments(${2:PREFIX} "\${options}" "\${one_value_keywords}" "\${multi_value_keywords}" \${ARGN})

		# Check arguments
		if(NOT TARGET "\${target}")
			message(FATAL_ERROR "\${FUNCTION_NAME} '\${target}' is not a TARGET")
		endif()

		${0:# TODO}
	endfunction()
snippet binary
	set(TARGET_NAME ${1:target})
	set(${2:INPUT_FILE} ${3:path})
	get_filename_component(${2}_NAME ${2} NAME)
	get_filename_component(${2}_DIR ${2} DIRECTORY)
	set(${4:OUTPUT_FILE} \${${2}_NAME}.c)

	add_custom_command(
		COMMENT "Generating C include file for \${${2}_NAME}"
		OUTPUT \${${4}}
		DEPENDS \${TARGET_NAME} \${${2}}
		COMMAND xxd -i \${${2}_NAME} "\${CMAKE_CURRENT_BINARY_DIR}/\${${4}}"
		WORKING_DIRECTORY \${${2}_DIR}
		)

	add_library(${5:lib} OBJECT \${${4}})
snippet extern
	include(ExternalProject)

	ExternalProject_Add(${1:googletest}_dl
		GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}
		GIT_TAG           ${3:release-1.10.0}
		GIT_CONFIG        advice.detachedHead=false
		GIT_SHALLOW       ON
		CMAKE_CACHE_ARGS  -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
		BUILD_COMMAND     \${CMAKE_COMMAND} --build <BINARY_DIR> --config \$<CONFIG>
		UPDATE_COMMAND    ""
		)
	ExternalProject_Get_property(${1}_dl INSTALL_DIR)

	add_library(${1} INTERFACE)

	target_include_directories(${1}
		INTERFACE \${INSTALL_DIR}/include
		)

	target_link_directories(${1}
		INTERFACE \${INSTALL_DIR}/lib
		)

	target_link_libraries(${1}
		INTERFACE Threads::Threads
		INTERFACE ${4:gtest gmock Threads::Threads}
		)

	add_dependencies(${1} ${1}_dl)
