## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* $1 */
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif /* $1 */
# if
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif /* $1 */
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif /* $1 */
# Disable C++ name mangling in C headers
snippet nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif /* __cplusplus */

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif /* __cplusplus */
##
## Control Statements
# if
snippet if
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
# else
snippet el
	else {
		${0:${VISUAL}}
	}
# else if
snippet elif
	else if (${1:true}) {
		${0:${VISUAL}}
	}
# ifi
snippet ifi
	if (${1:true}) { ${0} };
# ternary
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
	}
# switch without default
snippet switchndef
	switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return ${0};
##
## Loops
# for
snippet for
	for (size_t ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) {
		${0}
	}
# while
snippet wh
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
# do... while
snippet do
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
##
## Types
snippet td
	typedef ${1:int} ${2:MyCustomType};
# struct
snippet st
	struct ${1} {
		${0}
	};
snippet enum
	enum ${1:name} {
		${0}
	};
## Input/Output
# printf
snippet pr
	printf("${1:%s}\\n"${2});
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\\n"${3});
## Custom snippets
# main
snippet main
	#include <stdio.h>
	#include <stdlib.h>

	int main(int argc, char *argv[])
	{
		${0}return EXIT_SUCCESS;
	}
# main(void)
snippet mainn
	#include <stdio.h>
	#include <stdlib.h>

	int main(void)
	{
		${0}return EXIT_SUCCESS;
	}
# function definition
snippet fun
	${1:void} ${2:function_name}(${3:void})
	{
		${0}
	}
# function definition with zero parameters
snippet func
	int ${1:function_name}(${2:void})
	{
		int ret;
		${0}
		ret = SUCCESS;
	cleanup:
		return ret;
	}
snippet err
	if ( SUCCESS != ret ) { goto cleanup; }
# function definition with Doxygen documentation
snippet doc
	/**
	 * @brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * @param $3 ${4:Parameter description}
	 *
	 * @return ${5:Return parameter description}
	 */
snippet cmt
	/*
	 * ${0:${VISUAL}}
	 */
snippet dump
	for (size_t i = 0; i < ${1:array}_sz; ++i) {
		printf("%02x%c", ${1:array}[i], (i && (0 == ((i+1) % 16))) ? '\\n' : ' ');
	}
	if (0 != ($1 % 16)) {
		printf("\\n");
	}
snippet array
	uint8_t *${1:array} = NULL;
	size_t ${1}_sz = 0;
snippet arraysz
	uint8_t ${1:array}[${2:16}];
	size_t ${1}_sz = sizeof(${1});
