extends c

## Preprocessor
snippet incc
	#include <${1:iostream}>
## STL Collections
snippet vec
	std::vector<${1:T}> ${2};
snippet deque
	std::deque<${1:T}> ${2};
snippet list
	std::list<${1:T}> ${2};
snippet set
	std::set<${1:T}> ${2};
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
snippet stack
	std::stack<${1:T}> ${2};
snippet queue
	std::queue<${1:T}> ${2};
snippet pqueue
	std::priority_queue<${1:T}> ${2};
## STL smart pointers
snippet msp
	std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
snippet amsp
	auto ${1} = std::make_shared<${2:T}>(${3});
snippet mup
	std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
snippet amup
	auto ${1} = std::make_unique<${2:T}>(${3});
## Class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'MyClass')`}
	{
	public:
		${1}(${2});
		${1}(const ${1}&);
		${1}(${1}&&);

		${1}& operator=(const ${1}&);
		${1}& operator=(${1}&&);

		~$1();
	private:
		${0}
	};
# member function implementation
snippet mfun
	${4:void}
	${1:`vim_snippets#Filename('$1', 'MyClass')`}::${2:func}(${3})
	{
		${0}
	}
# namespace
snippet ns
	namespace ${1:`vim_snippets#Filename('$1', 'MyNamespace')`}
	{
		${0:${VISUAL}}
	} /* namespace ${1} */
snippet ans
	namespace
	{
		${0:${VISUAL}}
	}
## Input/Output
snippet cout
	std::cout << ${1} << std::endl;
snippet cin
	std::cin >> ${1};
## Casts
snippet sca
	static_cast<${1:uint8_t*}>(${2:expr})${0}
snippet dca
	dynamic_cast<${1:uint8_t*}>(${2:expr})${0}
snippet rca
	reinterpret_cast<${1:uint8_t*}>(${2:expr})${0}
snippet cca
	const_cast<${1:uint8_t}>(${2:expr})${0}
## Iteration
snippet for
	for (std::size_t ${2:i} = 0 ; ${2} < ${1:count}; ${3:++}$2) {
		${0}
	}
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${0}
	}
snippet iter
	for (auto ${1:i} = ${2:container}.begin() ; $1 != $2.end() ; ++$1) {
		${0}
	}
## Lambdas
snippet ld
	[${1}](${2}){${3}};
snippet lld
	[${1}](${2}){
		${3}
	};
## Exception
snippet try
	try {
		${0}
	} catch(${1}) {
	}
