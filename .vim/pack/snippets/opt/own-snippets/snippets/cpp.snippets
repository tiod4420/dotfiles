snippet! main
	#include <iostream>

	int main(int argc, char *argv[])
	{
		int ret = EXIT_FAILURE;
		int res;

		${0:$VISUAL}

		ret = EXIT_SUCCESS;
	cleanup:
		return ret;
	}
snippet! func
	int ret = ${1}FAILURE;
	int res;

	${0:$VISUAL}

	ret = ${1}SUCCESS;
	cleanup:
	return ret;
snippet! once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define ${1}

	${0:$VISUAL}

	#endif /* end ${1} */
snippet! struct
	enum ${1}_status {
		${1/.*/\U&}_SUCCESS = 0,
		${1/.*/\U&}_FAILURE = 1,
	};

	struct ${1:${VISUAL:struct}} {
	${0}
	};

	void ${1}_init(struct ${1} *${1});
	void ${1}_free(struct ${1} *${1});

	int ${1}_setup(struct ${1} *${1});

	const char *${1}_status_to_str(enum ${1}_status status);
snippet! cast
	((${1:const uint8_t *})${0:$VISUAL})
snippet! todo
	// TODO: ${0:$VISUAL}
snippet! pr
	printf("${1:%s}${2:\\n}");
snippet! dump
	for (size_t i = 0; i < ${1:${VISUAL:ptr}}_sz; ++i) {
		printf("%02x", ${0:$1}[i]);
	}
	printf("\\n");
snippet! array
	uint8_t ${1:array}[$2];
	size_t ${1}_sz = sizeof(${1});
snippet! ptr
	uint8_t *${1:ptr} = NULL;
	size_t ${1}_sz = 0;
snippet! inc
	#include <${1:iostream}>
snippet! Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
snippet! ifdef
	#ifdef ${1:FOO}
	${0:#define}
	#endif /* end ${1} */
snippet! ifndef
	#ifndef ${1:FOO}
	${0:#define}
	#endif /* end ${1} */
snippet! for
	for (size_t ${2:i} = 0; ${2} < ${1:count}; ${3:++}${2}) {
		${0}
	}
snippet! nocxx
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0:$VISUAL}

	#ifdef __cplusplus
	} /* end extern "C" */
	#endif
snippet vector
	std::vector<${1:uint8_t}> ${2:vector};
snippet deque
	std::deque<${1:uint8_t}> ${2:deque};
snippet list
	std::list<${1:uint8_t}> ${2:list};
snippet set
	std::set<${1:uint8_t}> ${2:set};
snippet stack
	std::stack<${1:uint8_t}> ${2:stack};
snippet queue
	std::queue<${1:uint8_t}> ${2:queue};
snippet map
	std::map<${1:std::string}, ${2:uint8_t}> ${3:map};
snippet shared
	auto ${3:shared} = std::make_shared<${1:uint8_t}>(${2});
# std::unique_ptr
snippet unique
	auto ${3:unique} = std::make_unique<${1:uint8_t}>(${2});
snippet class
	class ${1:${VISUAL:Class}} {
	    public:
		${1}();
		${1}(const ${1} &);
		${1}(${1} &&);

		~${1}();

		${1} &operator=(const ${1} &);
		${1} &operator=(${1} &&);

	    private:
		${0}
	};
snippet ns
	namespace ${1:ns} {
		${0:$VISUAL}
	}
snippet cout
	std::cout << ${0:${VISUAL:""}} << std::endl;
snippet cerr
	std::cerr << ${0:${VISUAL:""}} << std::endl;
snippet cin
	std::cin >> ${0:${VISUAL:var}};
snippet stcast
	static_cast<${2:const uint8_t *}>(${1:${VISUAL:ptr}})
snippet dycast
	dynamic_cast<${2:const uint8_t *}>(${1:${VISUAL:ptr}})
snippet recast
	reinterpret_cast<${2:const uint8_t *}>(${1:${VISUAL:ptr}})
snippet cocast
	const_cast<${2:const uint8_t *}>(${1:${VISUAL:ptr}})
snippet foreach
	for (${3:auto} ${2:i} : ${1:container}) {
		${0}
	}
snippet iter
	for (auto ${2:i} = ${1:container}.begin(); ${2} != ${1}.end(); ++${1}) {
		${0}
	}
snippet try
	try {
		${0:$VISUAL}
	} catch (${1:...}) {
		// TODO
	}
